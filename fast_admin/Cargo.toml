[package]
name = "fast_admin"
version = "0.1.0"
authors = ["by965738071@163.com <by965738071@163.com>"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
#fast_proc_macro = { path = "../fast_macro" }
actix-web = "4"
actix-http = "3"
actix-files = "0"
actix-cors = {version = "0"}
anyhow = { version = "1" }
#时间
chrono = { version = "0", features = ["serde"] }

async-trait = "0.1"
tera = { version = "1", default-features = false }
tokio = { version = "1", features = ["full"] }
#token
jsonwebtoken = { version = "8" }
serde = { version = "1", default-features = false, features = ["derive", "serde_derive"] }
serde_json ={version = "1"}


#静态初始化
lazy_static = "1"
async_once = "0"
once_cell = "1"


#网络请求
reqwest = { version = "0", features = ["serde_json", "json"] }

#redis 数据库支持
deadpool-redis = { version = "0" }
redis = { version = "0", default-features = false, features = [] }

short-crypt = "1"
futures = { version = "0" }
futures-util = "0"

mime = "0"
captcha = "0"
image = "0"
tracing = { version = "0" }
tracing-subscriber = { version = "0" }
tracing-actix-web = { version = "0" }
log = { version = "0" }
log4rs = { version = "1", features = ["default"] }
sqlx = { version = "0", features = ["sqlite", "chrono", "runtime-tokio-native-tls"] }
sql-builder = {version = "3" }
#ormx = {version = "0",features = ["sqlite"]}
#ormx-macros = {version = "0",fetures = ["sqlite"]}
#utoipa = { version = "3", features = ["actix_extras"] }
#utoipa-swagger-ui = { version = "3", features = ["debug-embed", "actix-web"] }
#打包工具
rust-embed = {version =  "6",features = ["actix-web","tokio"]}

# 此为 开发配置文件, 给 `cargo build` 所使用.
[profile.dev]
opt-level = 0      # 控制编译器构建的`--opt-level`。
# 0-1适合调试。 2是良好优化的。最大为 3。
# 's' 企图优化大小, 'z' 则 进一步优化大小.
debug = true       # (u32 or bool) 包括调试信息(调试符号).
# 相当于 `-C debuginfo=2` 编译器 标志.
rpath = false      # 控制 编译器 是否应该设置加载器路径.
# 若为 true, 传递 `-C rpath` 标志 给 编译器.
lto = false        # 链接时间优化通常会减少二进制文件和静态库的大小
# 但会增加编译时间.
# 若是 true, 传递 `-C lto` 标志 给 编译器, 和 若是一个
# 字符串值 像 'thin' ，那会传递 `-C lto=thin`
# 给 编译器
debug-assertions = true # 控制是否启用调试断言
# (e.g. debug_assert!() 和 算术溢出检查)
codegen-units = 16 # if > 1 并行代码生成，以改善
# 编译时间, 但阻止了些优化.
# 传递 `-C codegen-units`.
panic = 'unwind'   # 恐慌策略 (`-C panic=...`), 也可以是 'abort'
incremental = true # 是否启用增量编译
overflow-checks = true # 使用溢出检查进行整数运算。
# 传递 `-C overflow-checks=...`标志 给 compiler.

# 发布(release)的配置文件, 用于 `cargo build --release` (和 依赖项的
# `cargo test --release`,  包括本地 library 或 binary).
[profile.release]
opt-level = 3
debug = false
rpath = false
lto = false
debug-assertions = false
codegen-units = 16
panic = 'unwind'
incremental = false
overflow-checks = false